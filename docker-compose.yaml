version: '3.3'
services:
  bot:
    image: tg_bot
    build:
      context: ./bot
      dockerfile: Dockerfile
    container_name: bot_image
    env_file:
      - .env
    volumes:
      - ./bot:/bot
    depends_on:
      - db


  db:
    image: db_prim
    build:
      context: ./db_prim
      dockerfile: Dockerfile
    ports:
      - ${DB_PORT}:5432
    container_name: db_image
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    env_file:
      - .env
    command: |
      postgres
      -c listen_addresses=*
      -c unix_socket_directories=/var/run/postgresql
      -c log_replication_commands=on
      -c archive_mode=on
      -c wal_log_hints=on
      -c wal_level=replica
      -c hot_standby=on
      -c max_wal_senders=10
      -c max_replication_slots=10
      -c hot_standby_feedback=on
      -c password_encryption=scram-sha-256
    volumes:
      - ./db_prim/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: 'pg_isready -U ${DB_USER} --dbname=${DB_DATABASE}'
      interval: 10s
      timeout: 5s
      retries: 5

  db_repl:
    image: db_repl
    build:
      context: ./db_repl
      dockerfile: Dockerfile
    ports:
      - ${DB_REPL_PORT}:5432
    container_name: db_repl_image
    environment:
      PGUSER: ${DB_REPL_USER}
      PGPASSWORD: ${DB_REPL_PASSWORD}
    env_file:
      - .env
    depends_on:
      - db
